// function func(name,age,id){
//   const obj = {}
//   obj.name = name
//   obj.age = age
//   obj.id = id
//   return obj
// }
//
// console.log(func('john','20',1))


// javaScrip => 8 тип данный


// 6 => примитивный
// number => число 1,2,3,4,5,6,7,8,9,0
//string => строка " ", ' ',` `
//symbol => символ +, -, *, %, **, /
//boolean => логический true, false
//bigint => 123446n7890
//undefined => неопредленный

// ссылочный тип данный
// null
// Object


//  length => узундукту олчоп берет
//  slice() => ограничение кесип алып берет
//  substring() => ограничение кесип берет
//  substr() => узундука кесип берет ( 2 параметир кабыл алат )
//  replace() => тамгаларды озгортуп берет
//  replaceAll() => глобальный озгортот
//  toUpperCase() => тамгаларды чонойтот
//  toLowerCase() => тамгаларды кичирейтет
//  concat() => кошуп берет артына
//  charAt() => канчанчы индексте экенин таап берет
//  split() => ажыратып берет массив кайтарат
//  join() => бириктирет, массивди строкага айландырат
//  repeat() => кайталап берт
//  includes => бар жок экенин билип берет true, false кайтарат
//  toString() => Санды сап катары кайтарат
//  pop() => арт жагындагы элементти кесип алып берт
//  push() => артына кошуп берт
//  shift() => башындагы элементи кесет
//  unshift() => башына кошуп берет
//  splice() => жаны элементтерди кошуп берет
//  Math.round() => эң жакын бүтүн санды кайтарат (4,5 = 5) (4,4 = 4)
//  Math.sqrt() => квадрат тамырын кайтарат 5*5=25
//  Math.abs() => абсолюттук (оң) маанисин кайтарат -100 = 100
//  fill() => массивди толтуруп берет
//  localeCompare() => тамгаларды сорттоп берет ( a.localeCompare(b) )
//  Object.keys() => Объект бардык  кльючу
//  Object.values() => Объект бардык значениясынын кльючу
//  Object.entries() => массив кайтарып берет


// NUMBER-
// Math.(floor, ceil,trunc,round,random,sqrt)


// STRING - "",'',``
//     .length,slice(),splice,split,concat,repeat,charAt,substring,substr,toLowerCase(),toUppercase(),indexOf,lasIndexOf,includes,trim(start ,end),


// IF-ternary operator, typeof,логические операторы
// - IF-тернардык оператор if-else конструкциясынын кыскартылган түрү. Ал шартка жараша кандайдыр бир иш-аракеттерди жасоо керек болгондо колдонулат. Мисал:
// - ? => if()
// - : => else()
// age = 18;
// const message = age >= 18 ? 'Сен чоңсуң' : 'Сен чоң эмессиң';
// console.log(message); // 'Сен бойго жеткенсиң'

// - typeof - өзгөрмөнүн маалымат түрүн кайтаруучу оператор. Мисал:
// const name = 'Askar';
// console.log(typeof name); // 'string'

// - Логикалык операторлор бир туюнтмадагы бир нече шарттарды бириктирүүгө мүмкүндүк берүүчү операторлор.
// Эң кеңири таралган логикалык операторлор && (логикалык ЖАНА), || (логикалык ЖЕ) жана ! (логикалык ЭМЕС). Мисал:

// - && =>  ЖАНА
// - || => ЖЕ
// - ! => ЭМЕС

//    let  age = 40;
// const isAdult = age >= 18 && age <= 65;
// console.log(isAdult); // true


// FUNCTIONS -declaration,expression,anonymous(callback),arrow
// - Функцияны жарыялоо - "функция" ачкыч сөзүн колдонуу менен функцияны жарыялоо. Мисал:
// Function declaration(a, b) {
//     a + b кайтаруу;
// }

// - Function expression - өзгөрмөгө анын маанисин ыйгаруу аркылуу функцияны жарыялоо. Мисал:
// const sum = функция (a, b) {
//     a + b кайтаруу;
// }

// - Anonymous function (callback function) - аты жок жана башка функцияга аргумент катары берилүүчү функция. Мисал:
// setTimeout(функция() {
//     console log('Hello');
// }, 1000);

//- Arrow function  - жебе белгилерин колдонуу менен функциянын кыскартылган белгилөө. Мисал:
// const sum = (a, b) => a + b;

// ARRAY -
// Push, pop, shift,unshift ,sort, filter, map, reduce,some,find,every,fill, new Array массивдин тиби (true,false) localeCompare ,reverse,concat
// - push() - массивдин аягына элементтерди кошот жана массивдин жаңы узундугун кайтарат
// - pop() - массивдин акыркы элементин алып салат жана анын маанисин кайтарат
// - shift() - массивдин биринчи элементин жок кылат жана анын маанисин кайтарат, калган бардык элементтерди бир позицияны солго жылдырат
// - unshift() - массивдин башына элементтерди кошот жана массивдин жаңы узундугун кайтарат, калган бардык элементтерди оңго бир позицияга жылдырат
// - sort() - массивдин элементтерин өсүү тартибинде сорттойт (эгер салыштыруу функциясы өтпөй калса)
// - filter() - кайра чалуу функциясы чындыкты кайтарган баштапкы массивдин элементтерин гана камтыган жаңы массивди түзөт
// - map() - баштапкы массивдин ар бир элементи үчүн кайра чакыруу функциясын чакыруунун натыйжаларын камтыган жаңы массивди түзөт
// - reduce() - массивдин ар бир элементине (солдон оңго) кайра чалуу функциясын колдонот жана натыйжада бир маанини кайтарат
// - some() - массивдин жок дегенде бир элементи кайра чакыруу функциясында көрсөтүлгөн шартка жооп берерин текшерет
// - find() - кайра чакыруу функциясында көрсөтүлгөн шартты канааттандырган массивдин биринчи элементин кайтарат
// - every() - массивдин бардык элементтери кайра чакыруу функциясында көрсөтүлгөн шартка жооп берерин текшерет
// - fill() - массивдин бардык элементтерин бир мааниге толтурат
// - new Array() - берилген узундуктагы же берилген элементтер менен жаңы массивди түзөт
// - массивдер логикалык маанилерди камтышы мүмкүн (чын/жалган)
// - localeCompare() - учурдагы тилге ылайык эки сапты салыштырат жана алардын салыштырмалуу тартибин көрсөткөн санды кайтарат (саптар бирдей болсо 0)
// - reverse() - массив элементтеринин тартибин тескери кылат
// - concat() - эки же андан көп массивдерди бир жаңы массивге бириктирет.

// OBJECT - keys, values, entries,assign,freeze
// - Object.keys() - бардык объект ачкычтарынын массивин кайтарат
// - Object.values() - объекттин бардык маанилеринин массивин кайтарат
// - Object.entries() - объекттин ачкыч-маани жуптарынын массивдерин кайтарат
// - Object.assign() - бир же бир нече объекттердин бардык саналуучу касиеттеринин маанилерин максаттуу объектке көчүрөт жана максаттуу объектти кайтарат
// - Object.freeze() - объектти тоңдурат, анын касиеттерин кошууга, алып салууга же өзгөртүүгө жол бербейт.

// Delete
// Function object,variables
// Object кайрылуу турлору

// - Delete - объекттин же массив элементинин касиетин жок кылуу үчүн колдонулган оператор.
// Ал объекттин же массивдин өзүн жок кылбайт, бирок касиетке же элементке шилтемени гана жок кылат,
// мунун натыйжасында эстутум бошотулушу мүмкүн. Мисал:

// const obj = { a: 1, b: 2, c: 3 };
// delete obj.b;
// console.log(obj); // выводится { a: 1, c: 3 }
//
// const arr = [1, 2, 3];
// delete arr[1];
// console.log(arr); // выводится [1, <1 пустой элемент>, 3]

// - Функция объекти JavaScript'те функцияны билдирген объект.
// JavaScript'теги функциялар биринчи класстагы объекттер, башкача айтканда,
// алар башка функцияларга аргумент катары берилиши мүмкүн,
// функциялардан кайтарылып жана өзгөрмөлөрдө сакталышы мүмкүн. Мисал:

// function greet(name) {
//     console.log(`Hello, ${name}!`);
// }
//
// greet('John'); // 'Hello, John!'

// - Variables  программадагы маалыматтарды сактоочу контейнерлер деп аталат.
// JavaScript'те переменныйлар var, let же const ачкыч сөздөрү аркылуу жарыяланат. Мисал:

// var age = 25;
// let name = 'Жакан';
// const PI = 3,14;
//
//
// - Объект - бул JavaScript'те касиеттердин топтомун
// жана алардын баалуулуктарын  сактоого мүмкүндүк берген маалымат түрү.
// Объекттерди объекттин литералы же Object() конструктору менен түзсө болот. Мисал:

// const person = {
//     name: 'John',
//     age: 25,
//     address: {
//         city: 'New York',
//         state: 'NY'
//     }
// };
//
// console.log(person.name); // 'John'
// console.log(person.address.city); // 'New York'

// spread operator {},[]
// - Спред оператору массивдин элементтерин же объекттин касиеттерин таңгактан чыгарууга
// жана аларды кодуңуздун башка жеринде колдонууга мүмкүндүк берүүчү жайылтуу оператору.
// JavaScript-те жайылуу оператору үч чекит (...) менен белгиленет. Мисал:

// let arr1 = [1, 2, 3];
// let arr2 = [4, 5, 6];

// let arr3 = [...arr1, ...arr2];

// console.log(arr3); // [1, 2, 3, 4, 5, 6]

// - Объекттин литералы - JavaScript'тин тармал кашааларды колдонуу менен объектти түзүү ыкмасы {}.
// Объекттин литералы объекттин ичиндеги касиеттерди жана алардын баалуулуктарын коюуга мүмкүндүк берет. Мисал:

// const адам = {
//     аты: 'Джон',
//     жаш: 25
//     дареги: {
//         шаар: 'New York',
//         мамлекет: 'NY'
//     }
// };
//
//
// - Массив литералы — JavaScript'тин төрт бурчтуу кашааларды [] колдонуп массивди түзүү жолу.
// Массивдин литералы массивдин элементтерин квадрат кашаанын ичинде көрсөтүүгө мүмкүндүк берет. Мисал:

// const arr = [1, 2, 3];

// LOOPS-for,while,do while


//     Break,continue
// - Break - бул циклде (мисалы, for, while, do-while)
// жана коммутатор циклдин же коммутатор блогунун аткарылышын бузуу үчүн колдонулган оператор.
// Циклдин же коммутатор блогунун ичинде break операторуна жеткенде,
// аткаруу циклден же коммутатор блогунан чыгат жана цикл же коммутатор блогунан кийинки кийинки оператор менен уланат. Мисал:

// for (let i = 1; i <= 10; i++) {
//     if (i === 5) {
//         break;
//     }
//     console.log(i); // выводится 1, 2, 3, 4
// }

//- Continue  - циклдин учурдагы итерациясын өткөрүп жиберип,кийинкисине өтүү үчүн циклдерде колдонулган билдирүү.
// Циклдин ичинде улантуу операторуна жеткенде,учурдагы итерация токтотулат жана шартты текшерүү жана
// жаңы итерацияны баштоо менен аткаруу улантылат. Мисал:

// for (let i = 1; i <= 10; i++) {
//     if (i % 2 === 5) {
//         continue;
//     }
//     console.log(i); // выводится 1, 3, 5, 7, 9
// }

//     Carrying

// Carrying - бир нече аргументи бар функцияны бир аргументи бар
// функциялардын ырааттуулугуна айландырган функционалдык программалоо ыкмасы.
// Ошентип, ар бир кийинки функция өзүнүн биринчи аргументи катары мурунку функциянын жыйынтыгын колдонот.

// function func(a){
//     return function (b){
//         return function (c){
//             return a + b + c;
//         }
//     }
// }
//
// console.log(func(10)(20)(30))


// const generate = (a) => {
//     return (b) => {
//         return (c) => {
//             return (d) => {
//                 return `${a}.//${b}.${c}.${d}`
//             }
//         }
//     }
// }
// console.log(generate("https")("www")("google")("com"))




